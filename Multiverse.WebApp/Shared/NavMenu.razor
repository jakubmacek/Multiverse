@inject IAccountService AccountService
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Multiverse</a>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/worlds">Worlds</NavLink>
                </li>
            </ul>
            <ul class="navbar-nav mb-2 mb-lg-0">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        @if (AccountService.SelectedWorld != null)
                        {
                            <span class="badge bg-secondary" title="Selected world">@AccountService.SelectedWorld.Name</span>
                        }
                        &nbsp;
                        @if (AccountService.Player != null)
                        {
                            <span>@AccountService.Player.Name (@AccountService.Player.Id)</span>
                        }
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdownMenuLink">
                        <li><NavLink class="dropdown-item" href="/logout">Log out</NavLink></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code
{
    private void Changed(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        AccountService.PropertyChanged -= Changed;
    }

    protected override Task OnInitializedAsync()
    {
        AccountService.PropertyChanged += Changed;

        return base.OnInitializedAsync();
    }
}
