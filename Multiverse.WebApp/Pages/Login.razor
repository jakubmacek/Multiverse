@page "/login"
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.Name" class="form-control" />
                <ValidationMessage For="@(() => model.Name)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-group">
                <label>Player</label>
                <InputNumber @bind-Value="model.PlayerId" type="number" class="form-control" />
                <ValidationMessage For="@(() => model.PlayerId)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
        </EditForm>
    </div>
</div>

@code {
    private Models.Login model = new Models.Login();
    private bool loading;

    private async void OnValidSubmit()
    {
        AlertService.Clear();

        loading = true;
        try
        {
            await AccountService.Login(model);
            var returnUrl = System.Web.HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query)["returnUrl"] ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}